/* 보그 PJ 회원가입 페이지 JS - member.js */


/* 보그 PJ 회원가입 페이지 JS - member.js */

///////////// 제이쿼리 코드 블록 /////////////////
$(()=>{
    console.log("제이쿼리 - 로딩완료!");

    /********************************************* 
        [ 사용자 입력폼 유효성 검사 ]
        - 이벤트종류 : blur(포커스가 빠질때 발생) <-> focus(포커스 들어갈 때)
        - 제이쿼리 이벤트 메서드 : blur()
        - 이벤트 대상:
        -> id가 'email2'가 아니고 class가 'search'가 
        아닌 type이 'text'인 입력요소 input
        과 함께 type이 'password'인 입력요소 input

        ->>>> 제이쿼리 선택표현법:
        input[type=text][id!=email2][class!=search],
        input[type=password]
        >>> 대괄호는 속성선택자(CSS원래문법) 
        != 같지않다(제이쿼리전용)

    *********************************************/
    $(`input[type=text][id!=email2][class!=search],
    input[type=password]`)
    // .on("blur", function(){ ->> 이렇게 쓰는 게 보편적인 방법!
    .blur(function(){
        // console.log("블러!");

        // 0.공백 제거 처리 함수
        // get rid of space -> 공백을 제거하라!
        const groSpace = cv => cv.replace(/\s/g,"");
        // 원형 : (cv)=>{return cv.replace(/\s/g,"")};
        // 정규식 : 슬래쉬(/) 사이에 표현함, \s 는 스페이스문자임
        // 정규식도 객체래,,
        // 참고사이트 : https://www.w3schools.com/jsref/jsref_obj_regexp.asp
        // 해석 : 스페이스문자(공백문자)를 모두 (g:global-전역) 찾아서 없애시오(빈 공백으로 변경)


        // 1.방금 블러가 발생한 요소의 id는?
        let cid = $(this).attr("id"); // -> attr(속성명) 속성명 하나만 쓰면 속성 찾아옴(getAttribute와 같음)
        // cid는 current id(현재 아이디) 줄임말!
        
        // 2.블러가 발생한 요소의 입력 값은?
        // let cv = $(this).val().trim();
        // -중간공백제거 함수 추가한 것 : groSpace($(this).val());
        // 근데 이름은 중간 공백 줘야함! 즉, 거기는 트림만 써야함! ->> 삼항연산자로 해결하기
        let cv = cid==="mnm" ? $(this).val().trim() : groSpace($(this).val());
        // ->> cid가 mnm이니? 응 : 아니
        // cv는 current value (현재값)란 뜻
        // val() : input요소의 값(value)을 읽기/쓰기용
        // trim() : 앞/뒤 공백 제거 (공백만 있을 때도 공백 지워버림)
        // groSpace() : 전체 공백 제거 함수 (위에서 작성함)

        // 2-1.서비스 차원으로 공백 제거된 데이터를 다시 입력창에 넣어줌
        $(this).val(cv); // val()에다가 값을 넣으면 그 값이 반영됨
        
        console.log(cid, cv);

        /*****************************************
            3.빈값 여부 검사하기
        *****************************************/
        if(cv === ""){
            // 메시지 출력
            $(this).siblings(".msg").text("필수입력!").removeClass("on");
        }

        /************************************************************
            4.아이디일경우 유효성 검사
            -검사 기준 : 영문자로 시작하는 6~20글자 영문자/숫자
        ************************************************************/
        else if(cid === "mid"){
            // console.log("아이디 검사 결과: ", vReg(cv,cid));
            if(!vReg(cv,cid)){ // false일때 !(not연산자) 넣으면 됨!
                // 불통과일때 메시지
                $(this).siblings(".msg").text("영문자로 시작하는 6~20글자 영문자/숫자")
                .removeClass("on");
                // 클래스를 빼줘서 빨간색글자가 뜨게 만들기
            } /////////////// if : 아이디검사 불통과시 ////////////////
            else{
                // 통과시
                // 1.DB에 아이디가 있는지 조회 후 결과로 처리해야함!
                // ->>지금은 보류!!

                // 만약 아이디가 이미 있으면 "이미 사용중이거나 탈퇴한 아이디입니다."
                // 만약 아이디가 없으면 " 멋진 아이디네요!"

                // 2.메시지 띄우기
                $(this).siblings(".msg")
                .text("멋진 아이디네요!")
                .addClass("on");
                // 클래스를 줘서 초록색 글자가 뜨게 만들기
            } ///////// else : 아이디검사 통과시 ///////////////

        } ///////////// else if : id 검사 /////////////////

        /************************************************************
            5.비밀번호일경우 유효성 검사
            -검사 기준 : 특수문자,문자,숫자포함 형태의 5~15자리
        ************************************************************/
        else if(cid === "mpw"){
            // console.log("비밀번호 검사 결과: ", vReg(cv,cid));
            if(!vReg(cv,cid)){ // false일때 !(not연산자) 넣으면 됨!
                // 불통과일때 메시지
                $(this).siblings(".msg").text("특수문자,문자,숫자포함 형태의 5~15자리");
            } /////////////// if : 비번 검사 불통과시 ////////////////
            else{
                // 통과시
                // 메시지 지우기
                $(this).siblings(".msg").empty();
            } ///////// else : 아이디검사 통과시 ///////////////
        } ///////////// else if : 비번 검사 /////////////////

        /************************************************************
            5.비밀번호 확인일경우 유효성 검사
            -검사 기준 : 비밀번호와 동일한 내용
        ************************************************************/
            else if(cid === "mpw2"){
                
                if(cv !== $("#mpw").val()){ // 비밀번호와 일치하지 않으면!
                    // 불통과일때 메시지
                    $(this).siblings(".msg").text("비밀번호가 일치하지 않습니다.");
                } /////////////// if : 비번 검사 불통과시 ////////////////
                else{
                    // 통과시
                    // 메시지 지우기
                    $(this).siblings(".msg").empty();
                } ///////// else : 아이디검사 통과시 ///////////////
            } ///////////// else if : 비번 검사 /////////////////

        ////// 모두 통과일 경우 메시지 지우기 /////////////
        else{
            // 메시지 지우기
            $(this).siblings(".msg").empty();
            // empty() : 내용 지우기

        } ///////// else : 모두 통과 ///////////////

    }); ////////////// blur ///////////////


}); ////////////////// jQB /////////////////////



//////////////// 🌈정규 표현식🌈 //////////////////////
/*////////////////////////////////////////////////////////
    함수명: vReg (validation with Regular Expression)
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말아라!-싸면문자가됨!)
*/ ////////////////////////////////////////////////////////
function vReg(val, cid) {
    // val - 검사할값, cid - 처리구분아이디(뭘 검사할지 아이디를 보낸대)
    // //console.log("검사:"+val+"/"+cid);

    // 정규식 변수
    let reg;

    // 검사할 아이디에 따라 정규식을 변경함
    switch (cid) {
        case "mid": // 아이디
            reg = /^[a-z]{1}[a-z0-9]{5,19}$/g;
            // 영문자로 시작하는 6~20글자 영문자/숫자
            // /^[a-z]{1} 첫글자는 영문자로 체크!
            // [a-z0-9]{5,19} 첫글자 다음 문자는 영문 또는 숫자로
            // 최소 5글자에서 최대 19글자를 유효범위로 체크!
            // 첫글자 한글자를 더하면 최소 6글자에서 최대 20글자체크!
            break;
        case "mpw": // 비밀번호
            reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            // 특수문자,문자,숫자포함 형태의 5~15자리
            // (?=^.{5,15}$) 시작부터 끝까지 전체 5~15자릿수 체크!
            // (?=.*\d) 숫자 사용체크!
            // (?=.*[a-zA-Z]) 영문자 대문자 또는 소문자 사용체크!
            // (?=.*[!@#$%^&+=]) 특수문자 사용체크!
            break;
        case "eml": // 이메일
            reg =
                /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/;
            // 이메일 형식에 맞는지 검사하는 정규식
            break;
    } //////////// switch case문 //////////////////

    // //console.log("정규식:"+reg);

    // 정규식 검사를 위한 JS메서드
    // -> 정규식.test(검사할값) : 결과 true/false
    return reg.test(val); //호출한 곳으로 검사결과리턴!
} //////////// vReg 함수 //////////////////////////////////
///////////////////////////////////////////////////////////