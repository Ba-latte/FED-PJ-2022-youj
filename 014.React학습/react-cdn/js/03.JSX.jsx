// 03.JSX 특성 알아보기

/**********************************************************************************
    [ JSX란 무엇인가 ]
-JavaScript XML을 나타냄
-리액트에서 HTML을 쉽게 작성할 수 있음
-appendChild() 메서드 없이 DOM에 요소 넣기가 가능함
-
**********************************************************************************/

// 1.JSX를 사용한 것과 JSX를 사용하지 않은 것 비교해보기
// (1)JSX를 사용한 방법 //////////////////
// 넣을 요소
const myele1 = <h1>나는 JSX를 사용하고 있어!</h1>;

// 출력방식 2번 사용한 경우) 리액트 루트 생성하기 : createRoot() 메서드 사용하기
const root1 = ReactDOM.createRoot(document.querySelectorAll("#root>div")[0]);

// 적용하기 : 생성된 루트에 render() 메서드를 붙여서 사용하기
root1.render(myele1);


// (2)JSX를 사용하지 않는 방법 /////////////////
// : 넣을 요소를 createElement() 메서드로 생성해야 함 (JSX를 쓰지 않고....)
// -createElement() 메서드는 ReactDOM에 있는 게 아니라 React에 있음!
// -형식 : createElement(요소명, {JS코드 작성}, 요소내용)
const myele2 = React.createElement("h1", {}, "나는 JSX를 쓰지 않아!");


// 출력방식 1번 사용한 경우) 두번째 div요소에 출력하기
ReactDOM.render(myele2, document.querySelectorAll("#root>div")[1]);

/**********************************************************************************
    [ 출력방식 정리]
1.한꺼번에 쓰기
-ReactDOM.render(출력할 요소, 대상 요소);

2.따로 쓰기
    1) 변수에다 할당하기
    -생성변수 = RectDOM.createRoot(대상요소);
    -생성변수.render(출력할 요소);

___________________________________________________________________
    [ JSX를 사용하거나 사용하지 않는 경우 ]
-개발자의 선택사항임
-JSX는 ES6 기반의 자바스크립트 언어의 확장이며 런타임시 일반 자바스크립트로 변환됨 (리액트에서 변환해줌)
*런타임 : 렌더링해서 화면에 뿌릴 때 의미
____________________________________________________________________

    [ JSX 표현식 ]
-JSX를 사용하면 중괄호{}에 표현식을 쓸 수 있음
-형식 : {...... 표현식 .......}
-표현식이란?
-React에서 쓰는 변수, 속성, JS문법 등의 내용을 말함

**********************************************************************************/

let num1 = 1000;
let num2 = 7;
// (3)JSX 표현식 사용하기
const myele3 = <h1>리액트는 {num1*num2}번 사용해도 좋다!</h1>;

// 출력방식 1번 사용한 경우) 세번째 div요소에 출력하기
ReactDOM.render(myele3, document.querySelectorAll("#root>div")[2]);
// 그자리에 결과가 나와야한대(?) 즉, 이프문은 쓰면 안 되는데,, 삼항연산자는 가능,, 바로 그 결과 나오는 것을,,,말함,,,,,,,,,



/**********************************************************************************
    [ JSX 태그요소 작성시 여러줄일 경우 ]
1. 최상위를 하나 만들고 여러요소를 작성한다!
2. 소괄호로 전체를 싸준다! (소괄호는 생략 가능함)

- 지원되는 스타일:
1) <>태그들</>
2) <Fragment>태그들</Fragment>
3) <기존태그>태그들</기존태그>

-> 1),2)번은 CDN방식에서는 지원안함!(설치형SPA지원!)
-> 2)번 CDN에서 사용하려면 아래와 같이 사용한다!
    <React.Fragment></React.Fragment>
-> 1),2)번을 사용하는 이유는 쓸때 없는 태그삽입을 막는데있다!
-> 기존태그는 <div>,<section> 등 원래있는 html태그를 말함
    (단점, 원하는 않는 태그가 삽입됨!!!)
**********************************************************************************/

// (4)다중 요소 html 블록 삽입하기
const myele4 = (
    <React.Fragment>
        <h2>[ 다중요소 html 블록 출력하기 ]</h2>
        <ul>
            <li>프론트엔드개발</li>
            <li>리액트적용개발</li>
            <li>뷰JS적용개발</li>
        </ul>
    </React.Fragment>
);

// tip) 우선 root를 만들어서 감싸고, 그 사이에 넣을 태그 쓰면 됨 (까먹을수도있잖아 ㅎㅎㅎㅎ)
// -> 근데 리액트는 저런 불필요한 루트박스를 싸주는 그런게 있대!
// ->> 그게 바로 위의 'JSX 태그요소 작성시 여러줄일 경우' 에서 지원되는 스타일 1)과 2)임!
// ->> 근데 CDN에서는 2)의 React.Fragment라고 써야함


// 출력방식 1번 사용한 경우) 네번째 div요소에 출력하기
ReactDOM.render(myele4, document.querySelectorAll("#root>div")[3]);



// 5번에는 내가 원하는 태그를 출력해보기

const mydata = [
    {
        idx: 1,
        name: "김밥",
        birth: "91.11.23"
    },
    {
        idx: 2,
        name: "김말이",
        birth: "97.03.14"
    },
    {
        idx: 3,
        name: "순대",
        birth: "04.06.29"
    },
    {
        idx: 4,
        name: "튀김",
        birth: "10.10.01"
    },
];

// map(value, index, array)을 사용한 태그 생성하기
// map(배열값, 순번, 배열객체전체 자기자신)
// -파라미터 구성은 forEach() 메서드와 유사함
const mylist = mydata.map(val => 
    <ul>
        <li>{val.idx}</li>
        <li>{val.name}</li>
        <li>{val.birth}</li>
    </ul>
);

const myele5 = 
    <React.Fragment>
        <h1>냐미 리스트</h1>
        {mylist}
    </React.Fragment>

// 출력방식 1번 사용한 경우) 다섯번째 div요소에 출력하기
ReactDOM.render(myele5, document.querySelectorAll("#root>div")[4]);






/**********************************************************************************

    [ JSX는 홀로태그라도 끝에 닫기를 해줘야 함 ]
ex)<br> 👉 <br/>
<input type="text"> 👉 <input type="text" />
    
**********************************************************************************/
const myele6 = <input type="text" value="홀로 태그는 스스로 닫아라!" />;

// 출력방식 1번 사용한 경우) 여섯번째 div요소에 출력하기
ReactDOM.render(myele6, document.querySelectorAll("#root>div")[5]);






/**********************************************************************************

    [ JSX에서 속성 클래스는 className으로 표기함 ]
ex)<태그명 class="클래스명">
-class는 JS에서 키워드이므로 사용 못함
-대신에 classNmae이라고 아래처럼 써야함
ex)<태그명 classNmae="클래스명">

**********************************************************************************/
const myele7 = <h1 className="myclass">className 속성으로 클래스 세팅해야함</h1>

// 출력방식 1번 사용한 경우) 일곱번째 div요소에 출력하기
ReactDOM.render(myele7, document.querySelectorAll("#root>div")[6]);







/**********************************************************************************

    [ JSX에서 조건문 사용하기 - if문 ]
-리액트는 if명령문을 지원하지만 JSX 내부에서는 지원하지 않음
why)그자리에 바로 나와야하기 때문(표현식이라서)
-JSX에서 조건문을 사용하려면?
->JSX 외부에서 if문을 사용하거나 아니면 내부에서 삼항연산자를 사용할 수 있음

**********************************************************************************/
// JSX 외부에서 if문 사용하기
const x = 1000;
let txt = "이 돈으로는 충분히 살 수 있어!";

if(x < 10000){
    txt = "돈이 부족해서 살 수 없어!";
} //////////// if /////////////
// : 이렇게 바깥에서 함수 처리를 한다는 것임

const myele8 = 
<div>
    <h1>현재 내가 가진 돈은 {x}원</h1>
    <h1>{txt}</h1>
</div>;

// 출력방식 1번 사용한 경우) 여덟번째 div요소에 출력하기
ReactDOM.render(myele8, document.querySelectorAll("#root>div")[7]);




// JSX 표현식에 삼항연산자 사용하기
let time = 8;
const myele9 = (
    <React.Fragment>
        <h1>지금 몇 시지? {time}시야!</h1>
        <h1>{time > 9 ? "지금 집에 들어와!🤦‍♀️" : "더 놀다와~😊"}</h1>
    </React.Fragment>
);

// 출력방식 1번 사용한 경우) 아홉번째 div요소에 출력하기
ReactDOM.render(myele9, document.querySelectorAll("#root>div")[8]);


