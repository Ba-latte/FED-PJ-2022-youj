// JS 실험실 03. 배너 스타일 JS - ban.js

// 태그 로딩후 loadFn함수 호출!
window.addEventListener("DOMContentLoaded", loadFn);

/***************************************************** 
    [ 슬라이드 이동 기능정의 ]
    1. 이벤트 종류: click
    2. 이벤트 대상: 이동버튼(.abtn)
    3. 변경 대상: 슬라이드 박스(#slide)
    4. 기능 설계:

        -> left 이동의 기준값이 -220%인 것이 포인트!!
        (이유: 2장의 슬라이드가 앞에 나가있음 -> 왜 나가있지?: 잘라내는 것이 숨겨져야 하므로!)

        (1) 오른쪽 버튼 클릭시 다음 슬라이드가
            나타나도록 슬라이드 박스의 left값을
            -330%로 변경시킨다.
            -> 슬라이드 이동후!!! 
            바깥에 나가있는 첫번째 슬라이드
            li를 잘라서 맨뒤로 보낸다!
            동시에 left값을 -220%으로 변경한다!

        (2) 왼쪽버튼 클릭시 이전 슬라이드가
            나타나도록 하기위해 우선 맨뒤 li를
            맨앞으로 이동하고 동시에 left값을
            -330%로 변경한다.
            그 후 left값을 -220%으로 애니메이션하여
            슬라이드가 왼쪽에서 들어온다.

        (3) 공통기능: 슬라이드 위치표시 블릿
            - 블릿 대상: .indic li
            - 변경 내용: 슬라이드 순번과 같은 순번의
            li에 클래스 "on"주기(나머진 빼기->초기화!)

*****************************************************/

/****************************************** 
    함수명: loadFn
    기능: 로딩 후 버튼 이벤트 및 기능구현
******************************************/

function loadFn() {
    // 0.호출 확인
    console.log("로딩 완료!");

    // 1. 대상선정 //////////////////////////
    // 1-1. 이벤트 대상: .abtn
    const abtn = document.querySelectorAll(".abtn");

    // 1-2. 변경 대상: #slide
    const slide = document.querySelector("#slide");

    // 1-3. 블릿 대상: .indic li
    const indic = document.querySelectorAll(".indic li");
    console.log(indic);

    // 1-4. 슬라이드 li리스트
    let slist = document.querySelectorAll("#slide>li");

    // [ 초기화1 - 순번붙이기 ] ///////////////////
    // 잘라내기로 li순번이 뒤섞이므로 블릿변경 매칭을 위한
    // 고유순번을 사용자정의 속성(data-)으로 만들어준다!
    slist.forEach((ele, idx) => {
        // data-seq 라는 사용자정의 속성 넣기
        ele.setAttribute("data-seq", idx);
    }); ////// forEach /////////////////

    // [ 초기화2 - 맨뒤요소 맨앞으로 이동 2번하기! ]
    // 맨뒤 맨앞이동 함수만들기
    const chgSeq = () => {
        // 현재 슬라이드 li 새로읽기(2번반복시 li의 순서가 달라지기때문)
        slist = document.querySelectorAll("#slide>li");
        // 맨뒤 맨앞이동하기 -> 변경대상: #slide -> slide변수
        slide.insertBefore(slist[slist.length - 1], slist[0]);
        // slide.insertBefore(넣을놈,넣을놈전놈)
        // slide.insertBefore(마지막요소,첫요소)
        // slide.insertBefore(slist[개수-1],slist[0]);
    }; ////////// chgSeq함수 ///////////

    // 2번 맨뒤 맨앞이동 함수 호출하기!!!
    for (let i = 0; i < 2; i++) chgSeq();
    // 🍓4-1.광클 금지 변수 만들기
    let prot = 0;
    // : 0 - 허용 / 1 - 불허용
    // : 함수 바깥에 만들어서 상대적으로 전역변수로 만들고, 공간을 확보함

    // 2.슬라이드 변경 함수 만들기 - 할당형 함수로 만들기
    // 호출시 seq에 들어오는 값 중에서 1은 오른쪽, 0은 왼쪽임!!
    const goSlide = (seq) => {
        // 확인
        // console.log("슬라이드고우!", seq);

        // 🍓4.광클 금지 설정하기
        // : 계속 쉼없이 클릭하면 이미지가 버벅거리면서 잘 안넘어가진다! 그걸 방지하기 위함!!
        // how)방문 잠그고 못들어오게 해주면 됨! -> 못들어가 돌아가! -> 리턴!
        // console.log("못들어갔어!!!!!");
        // 🍓4-2.광클금지 설정하기
        if (prot) return;
        prot = 1;
        // if문으로 제어해서 한명만 들어가구 바로 방문을 잠가버려!
        // console.log("난 들어왔어!!!");
        // 정해진 시간이 지난 후 (슬라이드 넘어가는 트랜지션 시간이 지난 후), 다시 방문 열어주기!
        setTimeout(() => {
            prot = 0;
            // 방문 열어주기!
        }, 400);
        // tip) 그리고 시간같은건 바뀔 수 있으니까 변수로 처리해주면 더 굿굿~!

        // 2-0.현재의 슬라이드 li 수집하기
        let clist = slide.querySelectorAll("li");
        // : clist : current list 현재 리스트 의미함

        // 2-1. 방향에 따른 분기
        // 2-1-1. 오른쪽 버튼 클릭시 : seq===1
        if (seq) {
            // 확인
            // console.log("오른!");

            // (1) 오른쪽 버튼 클릭시 다음 슬라이드가
            // 나타나도록 슬라이드 박스의 left값을
            // -330%로 변경시킨다.
            slide.style.left = "-330%";
            // 📢->> 딱 한번만 이동하게 세팅해두기
            slide.style.transition = "left .4s ease-in-out";

            // (2) 슬라이드 이동후!!!
            setTimeout(() => {
                // : 0.4초 지나고 슬라이드가 이동한 후 말함

                // (2-1)바깥에 나가있는 첫번째 슬라이드 li를 잘라서 맨뒤로 보낸다!
                slide.appendChild(clist[0]);

                // (2-2)동시에 left값을 0으로 변경한다!
                slide.style.left = "-220%";

                // (2-3)밖의 첫번째 li를 잘라서 맨뒤로 보내면서 동시에 left값을 0으로 바꾸는걸...이렇게 움직이는 걸 굳이 보여줄 필요 없기 때문에 트랜지션을 없애주면 됨
                slide.style.transition = "none";
            }, 400); /////////////////// 타임 아웃 끝 ///////////////////
        } ////////////////////// if문 : 오른쪽 클릭시 /////////////////////////////

        // 2-1-2. 왼쪽 버튼 클릭시 : seq===0
        else {
            // 확인
            // console.log("왼!");

            // (1) 왼쪽버튼 클릭시 이전 슬라이드가 나타나도록 하기위해 우선 맨뒤 li를 맨앞으로 이동한다
            // slide.insertBefore(넣을놈, 넣을놈전놈);
            // slide.insertBefore(맨끝 li, 맨앞 li);
            slide.insertBefore(clist[clist.length - 1], clist[0]);

            // (2) 동시에 left값을 -220%로 변경한다.
            slide.style.left = "-220%";
            // : 안 튀게 만들기 위함
            // ->>이때 트랜지션도 없애줘야, 바깥쪽에서는 트랜지션이 없어서 팍팍 튀지 않는다;;
            // (처음에만 없지, 한번 실행후부터는 생기므로.....)
            slide.style.transition = "none";

            // (3) 그 후 left값을 -220%으로 애니메이션하여 슬라이드가 왼쪽에서 들어온다.
            // slide.style.left = "-220%";
            // : 이렇게 해두면 너무 빛으 속도로...해서.. 변함이 없어보여;; 그래서 코딩공간을 구분하면! 그러면 조금이라도 시차가 생김!! -> 이때 사용하는 게 setTimeout이래!
            // 📢📢쌤왈: 동일 속성인 left가 같은 코딩 처리 공간에서 동시에 있으므로, 이것을 분리해야 효과가 있다! 이때 쓰는게 setTimeout임!!
            setTimeout(() => {
                slide.style.left = "-220%";
                slide.style.transition = "left .4s ease-in-out";
            }, 0); ///////////////////// 타임 아웃 ////////////////////////////
        } //////////////////////// else문 : 왼쪽 클릭시 //////////////////////////////////

        // 5.현재 슬라이드 순번과 같은 불릿 표시하기
        // 대상 : .indic li -> indic 변수
        // indic[순번].classList.add("on")
        // 현재 순번을 모르겠으니까 ㅋㅋㅋ 현재 순번 콘솔에 찍어보기
        // 5-1.현재 배너 리스트 업데이트 하기!!
        clist = slide.querySelectorAll("li");
        // 오른쪽 클릭시 두번째 슬라이드[1] -> 즉 (seq===1)
        // 왼쪽 클릭시 첫번째 슬라이드[0] -> 즉 (seq===0)
        // ->>>>> seq순번과 읽어올 슬라이드의 순번이 일치한다!!

        // 5-2.방향별로 읽어올 슬라이드를 순번으로 "data-seq"값 읽어오기
        let cseq = clist[seq].getAttribute("data-seq");
        // console.log("현재 순번: ", cseq);

        // 5-4.블릿 초기화하기
        for (let x of indic) x.classList.remove("on");

        // 5-3.읽어온 슬라이드 순번의 블릿에 클래스 "on"넣기
        indic[cseq].classList.add("on");
    }; //////////////// goSlide 함수 끝 /////////////////////

    // 3.대상에 이벤트 설정하기
    // : abtn버튼 클릭하면 슬라이드 넘어가는 함수 호출해서 실행하기!!
    abtn.forEach((ele, idx) => {
        ele.onclick = () => {
            // 😊인터발 지우기 함수 호출!!
            clearAuto();

            // 😊슬라이드 함수 호출!!
            goSlide(idx);
        }; //////////// onclick 끝 ///////////////
    }); //////////////////////// forEach 끝 /////////////////////////////

    ///////////////////////////////////////////////////
    // 😊자동 넘김 설정하기 ////////////////////////////
    ///////////////////////////////////////////////////
    // 자동넘김 : 일정 시간 간격으로 넘어가기
    // ->setInterval(함수, 시간) 사용하면 됨
    // setInterval(goSlide(1),3000);
    // ->전달변수가 있다면 함수명()이렇게 쓰면 안 됨! 함수에 소괄호()가 붙는 순간 바로 실행됨!!
    // ->>전달변수가 있다면~ 익명함수에 담아서 보내야 함

    // [ 인터발 함수의 함수전달값 사용 예 +타임아웃 함수도 동일함!!]
    // 1. 함수에 전달값이 없으면 함수명만 사용 가능
    // setInterval(goSlide, 3000);
    // 2. 전달값이 있다면 익명함수구역에 코딩
    // setInterval(function(){goSlide(1)}, 3000);
    // 3. 화살표함수 사용가능
    // setInterval(()=>{goSlide(1)}, 3000);
    // 4. 화살표함수에서 중괄호 생략 가능
    setInterval(() => goSlide(1), 3000);

    // 나는 반대쪽을 건들고있는데, 자동넘김이 되면 둘이 충돌하는거임!
    // 이런거 방지하기 위해서.. 내가 건들고 있을 때는 너는 자동넘김 멈춰! 함수를 만들어서 호출해주면 됨!

    // 😊0.인터발 함수 멈추기 위한 변수 만들기
    let autoI;
    // : 값이 왔다갔다하니까 상수 안돼!
    // 😊4.타임아웃 함수 지우기 위한 변수
    let autoT;

    // 😊1.오토슬라이드 함수 만들기
    /*************************************************************
        함수명 : autoSlide
        기능 : 인터발 함수로 슬라이드 함수 호출하기
    *************************************************************/
    function autoSlide() {
        // 호출 확인
        console.log("인터벌 시작!");

        // 인터발 함수로 슬라이드 함수 호출하기
        autoI = setInterval(() => goSlide(1), 3000);
        // : 넘어가는 함수를 시간 지정해서 지정된 시간이 끝나면 넘어가도록하되, 바로 실행되지는 않도록 익명함수에 담아서 autoI변수에 담기! (오토아이라는 공간에 담아 두면 얘의 주소가 특정하게 잡히니까! 그래야 얘를 마음대로 부를 수 있음)
    } /////////////////////////// autoSlide 함수 끝 ///////////////////////////

    // 😊2.자동넘김 최초 호출하기
    autoSlide();

    // 😊3.멈추기 함수 만들기
    /***********************************************************************
        함수명 : clearAuto
        기능 : 인터발 함수를 지우고 다시 세팅하도록 만들기
    ***********************************************************************/
    function clearAuto() {
        // 호출 확인
        console.log("인터발 멈춰!");

        // 3-1.인터발 지우기
        clearInterval(autoI);

        // 3-3.타임아웃도 지우지 않으면! 그대로 쌓여서.. 타임아웃이 쓰나미처럼... 갑자기 막 실행된다ㅠ
        // ->따라서 지워줘야하는데, 그럼 얘도 변수에 담아서 특정 주소값을 줘야한다...!
        clearTimeout(autoT);

        // 3-2.잠시후 다시 작동하도록 타임아웃으로 인터발함수를 호출한다!!
        autoT = setTimeout(autoSlide, 5000);
        // : 5초후(인터발을 3초 후니까... 토탈 8초 후 작동 시작함)
    } //////////////////////////// clearAuto 함수 끝 ///////////////////////////////////
} //////////////// loadFn 함수 ///////////////
/////////////////////////////////////////////
