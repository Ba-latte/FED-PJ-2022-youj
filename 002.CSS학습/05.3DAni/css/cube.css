@charset "utf-8";

/* 큐브 애니메이션 CSS - cube.css */
html,body{
    margin: 0;
    padding: 0;
}
body{
    height: 100vh;
    background-image: linear-gradient(to bottom, rgb(101, 134, 98), rgb(115, 92, 145));
}

/* 변수 세팅 */
:root{
    /* 큐브의 공통 크기 */
    --csz:300px;
    /* --변수명 : 변수명은 내 마음대로 쓸 수 있음 */
}

/* 큐브 */
.cube{
    position: absolute;
    /* 정중앙으로 위치 이동 - calc(50% - 크기의 절반값) */
    top: calc(50% - var(--csz)/2);
    left: calc(50% - var(--csz)/2);
    /* calc() 연산시 주의사항 : +,-는 기호 앞뒤를 띄어써야하고 *,/는 붙여써도 됨 */
    width: var(--csz);
    height: var(--csz);

    /*************************************************************
        [ 입체로 설정하기 ]
    -입체로 설정할 요소의 '부모 박스'에 아래와 같이 설정해 주면 된다
    (여기서 부모 박스는 감싸고 있는 요소를 말함)
    -사용법 : transform-style: preserve-3d;
    -기본값은 2D 설정인 'flat'임
    -preserve-3d는 3D 설정임
    *************************************************************/
    transform-style: preserve-3d;

    /* 입체인 걸 잘 보이게 하기 위해서 약간 회전 주기 */
    transform: rotateX(10deg) rotateY(30deg);


    /* outline: 2px solid red; */

}

/* 큐브 각 면 공통 */
.cube span{
    position: absolute;
    /* 따로 디스플레이:블록 줄 필요 없이! 앱솔루트는 자동으로 블록이 된다 */
    width: 100%;
    height: 100%;
    /* 앱솔루트에서 %를 주면 부모를 찾는다! 여기서 부모는? .cube임 */
    
    /* 투명도 */
    opacity: 0.8;

    outline: 1px solid #555;
}

/* 1.앞면 */
.cube span:nth-child(1){
    background: url(../images/newyorkCity.jpg) no-repeat right/auto 105%;

    /* 화면방향(z축) */
    transform: translateZ(calc(var(--csz)/2));
    /* 큐브 사이즈의 절반을 z축의 앞쪽으로 이동시킴 */
}

/* 2.오른쪽면 */
.cube span:nth-child(2){
    background: url(../images/seoulCity.jpg) no-repeat center/cover;

    /* 화면방향(z축) */
    transform:
    rotateY(90deg)
    translateZ(calc(var(--csz)/2));
    /* 먼저 y축으로 회전한 후, 큐브 사이즈의 절반을 앞쪽으로 이동함 */
    /* 주의사항 - 돌리고 민거랑 / 밀고 돌린거랑 결과물이 달라짐 */

}

/* 3.뒷면 */
.cube span:nth-child(3){
    background: url(../images/parisCity.jpg) no-repeat center/cover;

    /* 화면방향(z축) */
    transform:
    rotateY(180deg)
    translateZ(calc(var(--csz)/2));
    /* 먼저 y축으로 회전한 후, 큐브 사이즈의 절반을 앞쪽으로 이동함 */
    /* 주의사항 - 돌리고 민거랑 / 밀고 돌린거랑 결과물이 달라짐 */

}

/* 4.왼쪽면 */
.cube span:nth-child(4){
    background: url(../images/cityMain.jpg) no-repeat center/cover;

    /* 화면방향(z축) */
    transform:
    rotateY(-90deg)
    translateZ(calc(var(--csz)/2));
    /* 먼저 y축으로 회전한 후, 큐브 사이즈의 절반을 앞쪽으로 이동함 */
    /* 주의사항 - 돌리고 민거랑 / 밀고 돌린거랑 결과물이 달라짐 */

}

/* 5.윗면 */
.cube span:nth-child(5){
    background: url(../images/citys.jpg) no-repeat center/100% 120%;

    /* 화면방향(z축) */
    transform:
    rotateX(90deg)
    translateZ(calc(var(--csz)/2));
    /* 먼저 x축으로 회전한 후, 큐브 사이즈의 절반을 앞쪽으로 이동함 */
    /* 주의사항 - 돌리고 민거랑 / 밀고 돌린거랑 결과물이 달라짐 */

}

/* 6.아랫면 */
.cube span:nth-child(6){
    background: url(../images/London_city.jpg) no-repeat center/cover;

    /* 화면방향(z축) */
    transform:
    rotateX(-90deg)
    translateZ(calc(var(--csz)/2));
    /* 먼저 x축으로 회전한 후, 큐브 사이즈의 절반을 앞쪽으로 이동함 */
    /* 주의사항 - 돌리고 민거랑 / 밀고 돌린거랑 결과물이 달라짐 */
}

/* 큐브 회전 클래스 - 먼저 클래스 만들고 html가서 클래스 주기 */
.cube-ani{
    /* 애니메이션 : 이시이지반방마 */
    animation: cubeAni 4s linear infinite;
}

/* 큐브 회전 키프레임 */
@keyframes cubeAni {
    to{
        /* x축 양의 방향으로, y축 음의 방향으로 회전 돌리기 */
        transform: rotateX(370deg) rotateY(-330deg);
        /**************************************************************************
                [ 회전 돌릴 때 계산 ]
            x축 양의 방향으로 10도에서 출발
            1.양의 방향(같은 방향인거지) 360도 + 10도 = 370도
            2.음의 방향(반대 방향인거지) -360도 + 10도 = -350도
        ____________________________________________________________________
            y축 양의 방향으로 30도에서 출발
            1.양의 방향(같은 방향인거지) 360도 + 30도 = 390도
            2.음의 방향(반대 방향인거지) -360도 + 30도 = -330도
        **************************************************************************/

        /* z축 회전도 적용할 수 있음 */
        /* transform: rotateX(370deg) rotateY(-330deg) rotateZ(360deg); */
    }
}